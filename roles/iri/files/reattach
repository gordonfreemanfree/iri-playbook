#!/usr/bin/env python
# coding=utf-8
import sys
import time
import signal
import argparse
import threading
from iota import *

 
"""Script to reattach a transaction to tangle
   source: https://github.com/nuriel77/iri-playbook
   Copyright (c) 2020 Nuriel Shem-Tov
"""

spinner = None


class Spinner:
    busy = False
    delay = 0.1

    @staticmethod
    def spinning_cursor():
        while 1: 
            for cursor in '|/-\\': yield cursor

    def __init__(self, delay=None):
        self.spinner_generator = self.spinning_cursor()
        if delay and float(delay): self.delay = delay

    def spinner_task(self):
        while self.busy:
            sys.stdout.write(next(self.spinner_generator))
            sys.stdout.flush()
            time.sleep(self.delay)
            sys.stdout.write('\b')
            sys.stdout.flush()

    def start(self):
        self.busy = True
        threading.Thread(target=self.spinner_task).start()

    def stop(self):
        self.busy = False
        time.sleep(self.delay)


def parse_args():

    parser = argparse.ArgumentParser(
        description='Reattach a transaction.',
        epilog='Example: ./reattach -x TXHASH'
               ' -i http://localhost:14265 -m 14 -d 2')

    parser.add_argument('--txhash', '-x', type=str,
                        required=True,
                        help='Transaction Hash to reattach')

    parser.add_argument('--depth', '-d', type=int,
                        default=2,
                        help='Depth. Default: %(default)s')

    parser.add_argument('--promote', '-p', action='store_true',
                        default=False,
                        help='Promote instead of attach.')

    parser.add_argument('--nospinner', '-n', action='store_true',
                        default=False,
                        help="Don't display spinner.")

    parser.add_argument('--magnitute', '-m', type=int,
                        default=14,
                        help='Minimum Weight Magnitute')

    parser.add_argument('--host', '-i', type=str,
                        default='http://localhost:14265',
                        help='IRI API endpoint. Default: %(default)s')

    return parser.parse_args()


def signal_handler(signal, frame):
    global spinner
    spinner.stop()
    print('CTRL-C detected!')
    sys.exit(1)


def run():
    global spinner

    try:
        args = parse_args()
    except Exception as e:
        sys.stderr.write("Error parsing arguments: %s\n" % e)
        sys.exit(1)

    tx_hash = args.txhash
    min_mag = args.magnitute
    depth = args.depth
    api_uri = args.host

    # Set signal handler    
    signal.signal(signal.SIGINT, signal_handler)

    # Create the API instance.
    api = Iota(api_uri)

    # Instantiate spinner
    spinner = Spinner()
    if args.nospinner is False:
        spinner.start()
        sys.stdout.write("\b")

    try:     
        if args.promote is True:
            sys.stdout.write("Promoting ...  ")
            sys.stdout.flush()
            api.promote_transaction(tx_hash, depth, min_mag)
        else:
            sys.stdout.write("Reattaching ...  ")
            sys.stdout.flush()
            api.replay_bundle(tx_hash, depth, min_mag)
    except Exception as e:
        sys.stderr.write("\nERROR: %s\n" % e)
        sys.exit(1)
    finally:
        if args.nospinner is False:
            spinner.stop()
        sys.stdout.write(" \n")


if __name__ == "__main__":
    run()
